# CircleCI config for automated test builds triggered from Github.
version: 2.1

jobs:
  test:
    parameters:
      cxx:
        type: string
    docker:
      - image: debian:stable
    # The resource_class feature allows configuring CPU and RAM resources for
    # each job.  Different resource classes are available for different
    # executors.
    # https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    resource_class: large
    environment:
      - PGHOST: "/tmp"
    steps:
      - checkout
      - run:
          name: Configure apt archives
          command: apt-get update && apt-get -y upgrade
      - run:
          name: Install
          command: DEBIAN_FRONTEND=noninteractive TZ=UTC apt-get install -y
            lsb-release python3 postgresql libpq-dev postgresql-server-dev-all
            build-essential autoconf autoconf-archive automake cppcheck clang
            shellcheck python3-virtualenv libtool
      - run:
          name: Identify
          command: lsb_release -a && c++ --version && clang++ --version
      - run:
          name: Autogen
          command: ./autogen.sh
      - run:
          name: Configure
          command: |
            ./configure \
                --enable-maintainer-mode \
                --enable-audit \
                --enable-shared --disable-static \
                CXXFLAGS='-O1 -std=<< cxx_version >>' \
                CXX=<< cxx >>
      - store_artifacts:
          path: config.log
      - run:
          name: Make
          command: make -j$(nproc)
      - run:
          name: Prepare postgres
          command: |
            mkdir /tmp/db &&
            chown postgres /tmp/db &&
            su postgres -c '/usr/lib/postgresql/*/bin/initdb --pgdata /tmp/db --auth trust --nosync'
      - run:
          name: Run postgres
          command: (su postgres -c '/usr/lib/postgresql/*/bin/postgres -D /tmp/db -k /tmp'
            &) && sleep 5
      - run:
          name: Create postgres user
          command: su postgres -c "createuser -w -d root"
      - run:
          name: Set up database
          command: createdb --template=template0 --encoding=UNICODE root
      - run:
          name: Test
          command: PGDATA=db/data make -j$(nproc) check
      - run:
          name: Analyse
          command: ./tools/lint --full >lint.log
      - store_artifacts:
          path: lint.log

workflows:
  all-tests:
    jobs:
      - test:
          matrix:
            parameters:
              cxx: ["clang++", "g++"]
              cxx_version: ["c++17", "c++20", "c++23", "c++26"]
#            exclude:
#              - cxx: "g++"
#                cxx_version: "c++26"
